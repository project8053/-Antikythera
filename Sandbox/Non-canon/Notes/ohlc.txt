/* Execute on dashboard.html */

window.open();

/* Execute on about:blank */

// 1. Ensure jquery is available; give sufficient time to load this script

var script = document.createElement('script'); 
script.src = 'https://localhost.daplie.com/~Antikythera/jquery-2.1.1.min.js'; 
document.head.appendChild(script);

// 2. Load the JSON file; big file - sufficient time needed + replace file name

var filename = 'archive.2016.04.12';
$.getJSON('https://localhost.daplie.com/~Antikythera/Sandbox/Non-canon/History%20(Google)/' + filename + '.json',
  function (output) { 
    window.data = [];

    var startTime = new Date(output[0].range[0].asOf.split('T')[0] + 'T03:46:00.000Z').getTime();
    for (var k = 0; k < output.length; k++) {
      data.push({
        'symbol': output[k].symbol,
        'range': [],
        'limits': {
          'previousClosePrice': output[k].previousClosePrice
        }
      });
      for (var i = 0; i < output[k].range.length; i++) {
        var index = (new Date(output[k].range[i].asOf).getTime() - startTime) / 1000 / 120;
        data[k].range[index] = output[k].range[i];
      }
    }
  console.log(data.length);
  });

// 3. Calculate limits
var maxRange = 0;
for (var k = 0; k < data.length; k++)
  if (data[k].range.length > maxRange)
    maxRange = data[k].range.length;

for (var k = 0; k < data.length; k++) {
  data[k].percChange = [];

  var maxPrice = Number.MIN_SAFE_INTEGER, minPrice = Number.MAX_SAFE_INTEGER;  
  for (var i = 0; i < data[k].range.length; i++) {
    if (data[k].range[i] == undefined)
      continue;

    data[k].percChange[i] = [
      (data[k].range[i].openPrice - data[k].limits.previousClosePrice) / data[k].limits.previousClosePrice,
      (data[k].range[i].highPrice - data[k].limits.previousClosePrice) / data[k].limits.previousClosePrice,
      (data[k].range[i].lowPrice - data[k].limits.previousClosePrice) / data[k].limits.previousClosePrice,
      (data[k].range[i].closePrice - data[k].limits.previousClosePrice) / data[k].limits.previousClosePrice
    ];

    if (data[k].range[i].highPrice > maxPrice)
      maxPrice = data[k].range[i].highPrice;
    if (data[k].range[i].lowPrice < minPrice)
      minPrice = data[k].range[i].lowPrice;
  }
  data[k].limits.maxPrice = maxPrice;
  data[k].limits.minPrice = minPrice;
}

// 5. Calculate slope
var SETTING = {
  'REQD_SLOPE_CALC_VAL': 30
};

for (var k = 0; k < data.length; k++) {
  data[k].regression = [];
  for (var i = SETTING.REQD_SLOPE_CALC_VAL - 1; i < data[k].percChange.length; i++) {
    data[k].regression[i] = [];
    for (var p = 0; p < 4; p++) {
      var x = 0, xx = 0, y = 0, xy = 0, n = 0;
      for (var j = i; j > i - SETTING.REQD_SLOPE_CALC_VAL; j--) {
        x += j;
        xx += j * j;
        y += data[k].percChange[j][p];
        xy += j * data[k].percChange[j][p];
        n++;
      }
      var m = ((n * xy) - (x * y)) / ((n * xx) - (x * x));
      var b = (y - m * x) / n;
      data[k].regression[i][p] = {
        'm': m,
        'b': b
      };
    }
  }
  console.log(k);
}

// 5. Prepare GUI
var table = document.createElement('table');
document.body.appendChild(table);
for (var k = 0; k < data.length; k++) {
  var row = table.insertRow(k);
  row.insertCell(0).innerHTML = data[k].symbol;
  if (data[k].range.length == 0)
    continue;
  row.insertCell(1).appendChild(data[k].canvas = document.createElement('canvas'));  
}

// 6. Draw canvas
for (var k = 0; k < data.length; k++) {
  var canvas = data[k].canvas;
  if (canvas == undefined)
    continue;
  canvas.width = maxRange * 4;
  canvas.height = Math.ceil(50 * 100 * (data[k].limits.maxPrice - data[k].limits.minPrice) / data[k].limits.minPrice) + 1;
  
  var context = canvas.getContext('2d');
  for (var i = 0; i < data[k].range.length; i++) {
    if (data[k].range[i] == undefined)
      continue;
    
    context.beginPath();
    context.fillStyle = context.strokeStyle = data[k].range[i].openPrice > data[k].range[i].closePrice ? 'red' : (data[k].range[i].openPrice < data[k].range[i].closePrice ? 'green' : '#A9A9A9');

    var x = 4 * i + 2.5;
    if (data[k].range[i].highPrice == data[k].range[i].lowPrice) {
      var y = Math.ceil(50 * 100 * (data[k].limits.maxPrice - data[k].range[i].highPrice) / data[k].limits.minPrice);
      context.fillRect(x - 1.5, y, 3, 1);
    }
    else {
      var yHigh, yLow, yOpen, yClose;
      yHigh = Math.ceil(50 * 100 * (data[k].limits.maxPrice - data[k].range[i].highPrice) / data[k].limits.minPrice);
      yLow = Math.ceil(50 * 100 * (data[k].limits.maxPrice - data[k].range[i].lowPrice) / data[k].limits.minPrice);
      yOpen = Math.ceil(50 * 100 * (data[k].limits.maxPrice - data[k].range[i].openPrice) / data[k].limits.minPrice);
      yClose = Math.ceil(50 * 100 * (data[k].limits.maxPrice - data[k].range[i].closePrice) / data[k].limits.minPrice);

      context.moveTo(x, yHigh);

      context.lineTo(x, yLow + 1);
      context.stroke();

      context.fillRect(x - 1.5, yOpen, 1.5, 1);
      context.fillRect(x, yClose, 1.5, 1);      
    }
  }  
}