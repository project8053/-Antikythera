/* Execute on dashboard.html */

window.open().document.body.innerHTML = '<svg id="svg" style="position:absolute;top:0;left:0;visibility:hidden;" height="10" width="10"><line id="line1" x1="0" y1="0" x2="200" y2="200" style="stroke:rgb(0,102,221);"></line><line id="line2" x1="0" y1="0" x2="200" y2="200" style="stroke:rgb(192,128,156);"></line></svg>';

/* Execute on about:blank */

// 1. Ensure jquery is available; give sufficient time to load this script

var script = document.createElement('script'); 
script.src = 'https://localhost.daplie.com/~Antikythera/jquery-2.1.1.min.js'; 
document.head.appendChild(script);

// 2. Load the JSON file; big file - sufficient time needed + replace file name

var filename = 'archive.2016.04.12';
$.getJSON('https://localhost.daplie.com/~Antikythera/Sandbox/Non-canon/History%20(Google)/' + filename + '.json',
  function (output) { 
    window.data = [];

    var startTime = new Date(output[0].range[0].asOf.split('T')[0] + 'T03:46:00.000Z').getTime();
    for (var k = 0; k < output.length; k++) {
      data.push({
        'symbol': output[k].symbol,
        'range': [],
        'limits': {
          'previousClosePrice': output[k].previousClosePrice
        }
      });
      for (var i = 0; i < output[k].range.length; i++) {
        var index = (new Date(output[k].range[i].asOf).getTime() - startTime) / 1000 / 120;
        data[k].range[index] = output[k].range[i];
      }
    }
  console.info('No. of scrips is ' + data.length, new Date());
  });

// 3. Calculate multiple limits

var maxRange = 0;
for (var k = 0; k < data.length; k++)
  if (data[k].range.length > maxRange)
    maxRange = data[k].range.length;
console.info('Max. range is ' + maxRange, new Date());

for (var k = 0; k < data.length; k++) {
  data[k].percChange = [];
  for (var i = 0; i < data[k].range.length; i++) {
    if (data[k].range[i] == undefined)
      continue;
    data[k].percChange[i] = [
      (data[k].range[i].openPrice - data[k].limits.previousClosePrice) / data[k].limits.previousClosePrice,
      (data[k].range[i].highPrice - data[k].limits.previousClosePrice) / data[k].limits.previousClosePrice,
      (data[k].range[i].lowPrice - data[k].limits.previousClosePrice) / data[k].limits.previousClosePrice,
      (data[k].range[i].closePrice - data[k].limits.previousClosePrice) / data[k].limits.previousClosePrice
    ];
  }
}
console.info('Perc. change calculated', new Date());

for (var k = 0; k < data.length; k++) {
  var maxPercChange = Number.MIN_SAFE_INTEGER, minPercChange = Number.MAX_SAFE_INTEGER;
  for (var i = 0; i < data[k].percChange.length; i++)
    for (var j = 0; j < 4; j++) {
      if (data[k].percChange[i] == undefined)
        continue;
      if (data[k].percChange[i][j] > maxPercChange) maxPercChange = data[k].percChange[i][j];
      if (data[k].percChange[i][j] < minPercChange) minPercChange = data[k].percChange[i][j];
    }
  data[k].limits.maxPercChange = maxPercChange;
  data[k].limits.minPercChange = minPercChange;
}
console.info('Limits defined', new Date());

// 4. Calculate slope

var SETTING = {
  'REG_FIRST_DER_COUNT': 29,
  'REG_SECOND_DER_COUNT': 5
};

var SCALE = {
  'X': 4,
  'Y': 50 * 100
};

var PRICE = {
  'O': 0,
  'H': 1,
  'L': 2,
  'C': 3
};

var FILTER = {
  'NON_EMPTY': true
};

Array.prototype.process = function (a, b, c, d) {
// IMPORTANT: if using d, ensure X/e is also passed in Slope function
// Use something like: if a for Y/d = function (o) { return expression; }, then a for X/e = function (o, index) { return expression == undefined ? undefined : index; }
  var o;
  if (typeof a == 'function') 
    o = this.map(a);
  else { 
    d = c; 
    c = b; 
    b = a; 
    o = this;
  }
  if (typeof d == 'boolean' && d) {
    o = o.slice(0, c).filter(function (e) { return typeof e == 'number'; });
    return o.slice(o.length - c + b);
  }
  else
    return o.slice(b > 0 ? b : 0, c);
};

Slope = function (d, e, f) {
  if (typeof e == 'number' && typeof f == 'undefined') {
  // i.e. the user has not passed an X array as second argument, but has passed a min. count
    f = e;
    e = undefined;
  }

  var x = 0, xx = 0, y = 0, xy = 0, n = 0, i = 0;
  for (; i < d.length; i++) {
    if (d[i] == undefined)
      continue;
    var g = e == undefined ? i : e[i];
    x += g;
    xx += g * g;
    y += d[i];
    xy += g * d[i];
    n++;
  }
  
  if (n < 2 || (f != undefined && i < f))
  // min. 2 non-zero entries are reqd. for slope + atleast f entries (incl. undefined if passed)
    return;
  
  var m = ((n * xy) - (x * y)) / ((n * xx) - (x * x));
  var b = (y - m * x) / n;
  
  return { 
    'm': m,
    'b': b
  };
};

for (var k = 0; k < data.length; k++) {
  data[k].regression = [];

  data[k].limits.maxSlopeAngle = 0;
  data[k].limits.minSlopeAngle = 0;
  
  for (var i = 0; i < data[k].percChange.length; i++) {
    var o = Slope(data[k].percChange.process(function (o) { return o[PRICE.C]; }, (i + 1) - SETTING.REG_FIRST_DER_COUNT, i + 1, FILTER.NON_EMPTY), 
                  data[k].percChange.process(function (o, index) { return o[PRICE.C] == undefined ? undefined : index; }, (i + 1) - SETTING.REG_FIRST_DER_COUNT, i + 1, FILTER.NON_EMPTY), 
                  SETTING.REG_FIRST_DER_COUNT);
    if (o == undefined)
      continue;

    var angle = Math.atan(o.m * SCALE.Y / SCALE.X) * 180 / Math.PI;

    data[k].regression[i] = {
      'm': o.m,
      'b': o.b,
      'angle': angle
    };      
      
    data[k].limits.maxSlopeAngle = angle > data[k].limits.maxSlopeAngle ? angle : data[k].limits.maxSlopeAngle;
    data[k].limits.minSlopeAngle = angle < data[k].limits.minSlopeAngle ? angle : data[k].limits.minSlopeAngle;    
  }
}
console.info('First derivative calculated', new Date());

for (var k = 0; k < data.length; k++) {
  data[k].secondDerivative = [];

  data[k].limits.maxDerivativeAngle = 0;
  data[k].limits.minDerivativeAngle = 0;
  
  for (var i = 0; i < data[k].regression.length; i++) {
    var o = Slope(data[k].regression.process(function (o) { return o.angle; }, (i + 1) - SETTING.REG_SECOND_DER_COUNT, i + 1, FILTER.NON_EMPTY), 
                  data[k].regression.process(function (o, index) { return o.angle == undefined ? undefined : index; }, (i + 1) - SETTING.REG_SECOND_DER_COUNT, i + 1, FILTER.NON_EMPTY), 
                  SETTING.REG_SECOND_DER_COUNT);
    if (o == undefined)
      continue;

    var angle = Math.atan(o.m * 1 / SCALE.X) * 180 / Math.PI;

    data[k].secondDerivative[i] = {
      'm': o.m,
      'b': o.b,
      'angle': angle
    };      
      
    data[k].limits.maxDerivativeAngle = angle > data[k].limits.maxDerivativeAngle ? angle : data[k].limits.maxDerivativeAngle;
    data[k].limits.minDerivativeAngle = angle < data[k].limits.minDerivativeAngle ? angle : data[k].limits.minDerivativeAngle;    
  }
}
console.info('Second derivative calculated', new Date());

// 5. Prepare GUI

var table = document.createElement('table');
document.body.appendChild(table);
for (var k = 0; k < data.length; k++) {
  var row = table.insertRow(k);
  var symbol = row.insertCell(0);
  symbol.innerHTML = data[k].symbol;
  
  if (data[k].range.length == 0)
    continue;

  row.insertCell(1).appendChild(data[k].canvas = document.createElement('canvas'));  
  data[k].canvas.setAttribute('k', k);
}
console.info('table created', new Date());

for (var k = 0; k < data.length; k++) {
  var canvas = data[k].canvas;
  canvas.width = maxRange * SCALE.X;
  canvas.height = 2 + Math.ceil(SCALE.Y * (data[k].limits.maxPercChange - data[k].limits.minPercChange)) + 2
                + 2 + Math.ceil(1 * (data[k].limits.maxSlopeAngle - data[k].limits.minSlopeAngle)) + 2
                + 2 + Math.ceil(1 * (data[k].limits.maxDerivativeAngle - data[k].limits.minDerivativeAngle)) + 2;
  var yOffset = [ 2, 
                  2 + Math.ceil(SCALE.Y * (data[k].limits.maxPercChange - data[k].limits.minPercChange)) + 2 + 2, 
                  2 + Math.ceil(SCALE.Y * (data[k].limits.maxPercChange - data[k].limits.minPercChange)) + 2 + 2 + Math.ceil(1 * (data[k].limits.maxSlopeAngle - data[k].limits.minSlopeAngle)) + 2 + 2 ];
  data[k].canvas.setAttribute('offset', JSON.stringify(yOffset));
    
  if (data[k].range.length == 0)
    continue;

  var context = canvas.getContext('2d');

  for (var i = 0; i < data[k].range.length; i++) {
    if (data[k].range[i] == undefined)
      continue;
    
    context.beginPath();
    context.fillStyle = context.strokeStyle = data[k].range[i].openPrice > data[k].range[i].closePrice ? 'red' : (data[k].range[i].openPrice < data[k].range[i].closePrice ? 'green' : '#A9A9A9');

    var x = SCALE.X * i + 2.5;
    if (data[k].range[i].highPrice == data[k].range[i].lowPrice) {
      var y = yOffset[0] + Math.ceil(SCALE.Y * (data[k].limits.maxPercChange - data[k].percChange[i][1]));
      context.fillRect(x - 1.5, y, 3, 1);
    }
    else {
      var yHigh, yLow, yOpen, yClose;
      yHigh = yOffset[0] + Math.ceil(SCALE.Y * (data[k].limits.maxPercChange - data[k].percChange[i][1]));
      yLow = yOffset[0] + Math.ceil(SCALE.Y * (data[k].limits.maxPercChange - data[k].percChange[i][2]));
      yOpen = yOffset[0] + Math.ceil(SCALE.Y * (data[k].limits.maxPercChange - data[k].percChange[i][0]));
      yClose = yOffset[0] + Math.ceil(SCALE.Y * (data[k].limits.maxPercChange - data[k].percChange[i][3]));

      context.moveTo(x, yHigh);

      context.lineTo(x, yLow + 1);
      context.stroke();

      context.fillRect(x - 1.5, yOpen, 1.5, 1);
      context.fillRect(x, yClose, 1.5, 1);      
    }
  }  

  var isStart;

  context.beginPath();

  var yZero = yOffset[1] + Math.ceil(1 * (data[k].limits.maxSlopeAngle - 0)) + 0.5;
  context.moveTo(SCALE.X * 1 + 2.5, yZero);
  context.lineTo(SCALE.X * (data[k].regression.length - 1) + 2.5, yZero);
  context.setLineDash([3, 2]);
  context.strokeStyle = '#A9A9A9';
  context.stroke();

  context.beginPath();
  context.setLineDash([0]);
  context.strokeStyle = '#0066DD';
  isStart = true;
  for (var i = 1; i < data[k].regression.length; i++) {
    if (data[k].regression == undefined || data[k].regression[i] == undefined || data[k].regression[i].angle == 0)
      continue;
    
    var x = SCALE.X * i + 2.5;
    var yAngle = yOffset[1] + Math.ceil(1 * (data[k].limits.maxSlopeAngle - data[k].regression[i].angle));

    if (isStart) {
      context.moveTo(x, yAngle);

      isStart = false;
    }
    else
      context.lineTo(x, yAngle);
  }
  context.stroke();

  context.beginPath();
  
  var yZero = yOffset[2] + Math.ceil(1 * (data[k].limits.maxDerivativeAngle - 0)) + 0.5;
  context.moveTo(SCALE.X * 1 + 2.5, yZero);
  context.lineTo(SCALE.X * (data[k].secondDerivative.length - 1) + 2.5, yZero);
  context.setLineDash([3, 2]);
  context.strokeStyle = '#A9A9A9';
  context.stroke();

  context.beginPath();
  context.setLineDash([0]);
  context.strokeStyle = '#C0809C';
  isStart = true;
  for (var i = 2; i < data[k].secondDerivative.length; i++) {
    if (data[k].secondDerivative == undefined || data[k].secondDerivative[i] == undefined || data[k].secondDerivative[i].angle == 0)
      continue;
    
    var x = SCALE.X * i + 2.5;
    var yAngle = yOffset[2] + Math.ceil(1 * (data[k].limits.maxDerivativeAngle - data[k].secondDerivative[i].angle));

    if (isStart) {
      context.moveTo(x, yAngle);

      isStart = false;
    }
    else
      context.lineTo(x, yAngle);
  }
  context.stroke();
}

// 6. Prepare event

document.getElementById('svg').addEventListener('mouseleave', function (e) {
  this.style.visibility = 'hidden';
  document.getElementById('line1').style.visibility = 'hidden';
  document.getElementById('line2').style.visibility = 'hidden';
});

document.getElementById('svg').addEventListener('mousemove', function (e) {
  var i = Math.floor((e.pageX - $(this).offset().left) / SCALE.X);
  var k = $(this).attr('k');
  var yOffset = JSON.parse($(this).attr('offset'));
  
  var line1 = document.getElementById('line1');
  var line2 = document.getElementById('line2');

  if (data[k].regression[i] == undefined)
    document.getElementById('line1').style.visibility = 'hidden';
  else {
    var m = data[k].regression[i].m;
    var b = data[k].regression[i].b;

    line1.setAttribute('x1', SCALE.X * (i - 30) + 2.5); 
    line1.setAttribute('y1', yOffset[0] + Math.ceil(SCALE.Y * (data[k].limits.maxPercChange - (m * (i - 30) + b)))); 
    line1.setAttribute('x2', SCALE.X * (i + 5) + 2.5); 
    line1.setAttribute('y2', yOffset[0] + Math.ceil(SCALE.Y * (data[k].limits.maxPercChange - (m * (i + 5) + b)))); 
    line1.style.visibility = 'visible';
  }

  if (data[k].secondDerivative[i] == undefined)
    document.getElementById('line2').style.visibility = 'hidden';
  else {
    var m = data[k].secondDerivative[i].m;
    var b = data[k].secondDerivative[i].b;

    line2.setAttribute('x1', SCALE.X * (i - 15) + 2.5); 
    line2.setAttribute('y1', yOffset[1] + Math.ceil(1 * (data[k].limits.maxSlopeAngle - (m * (i - 15) + b)))); 
    line2.setAttribute('x2', SCALE.X * (i + 15) + 2.5); 
    line2.setAttribute('y2', yOffset[1] + Math.ceil(1 * (data[k].limits.maxSlopeAngle - (m * (i + 15) + b)))); 
    line2.style.visibility = 'visible';
  }
});

Array.prototype.forEach.call(document.getElementsByTagName('canvas'), function (o) {
  o.addEventListener('mouseenter', function (e) {
    var svg = document.getElementById('svg');
    svg.style.top = $(this).offset().top;
    svg.style.left = $(this).offset().left;
    svg.setAttribute('height', $(this).height());
    svg.setAttribute('width', $(this).width());
    svg.setAttribute('k', $(this).attr('k'));
    svg.setAttribute('offset', $(this).attr('offset'));
    svg.style.visibility = 'visible';
  });
});
